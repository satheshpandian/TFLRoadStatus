// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

#region Designer generated code

using TechTalk.SpecFlow;

#pragma warning disable
namespace TFLRoadStatus.Behaviour.Tests
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("RoadStatusTest", Description =
        "\tRetrieve DisplayName, Severity and Severity Description \r\n\tWhen correct road id " +
        "is passed", SourceFile = "RoadStatusTest.feature", SourceLine = 0)]
    public partial class RoadStatusTestFeature
    {
        private TechTalk.SpecFlow.ITestRunner testRunner;

        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(
                new System.Globalization.CultureInfo("en-US"), "RoadStatusTest",
                "\tRetrieve DisplayName, Severity and Severity Description \r\n\tWhen correct road id " +
                "is passed", ProgrammingLanguage.CSharp, ((string[]) (null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        public virtual void TestInitialize()
        {
        }

        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }

        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        [TechTalk.SpecRun.ScenarioAttribute("Display Name should be displayed", new string[]
        {
            "displayStatusName"
        }, SourceLine = 5)]
        public virtual void DisplayNameShouldBeDisplayed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(
                "Display Name should be displayed", null, new string[]
                {
                    "displayStatusName"
                });
#line 6
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
            testRunner.Given("a valid road ID \'A2\' is specified", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 8
            testRunner.When("the client is run", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "When ");
#line 9
            testRunner.Then("the road \'displayName\' should be displayed", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("Display Status Severity", new string[]
        {
            "displayStatusSeverity"
        }, SourceLine = 12)]
        public virtual void DisplayStatusSeverity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Display Status Severity",
                null, new string[]
                {
                    "displayStatusSeverity"
                });
#line 13
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 14
            testRunner.Given("a valid road ID \'A2\' is specified", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 15
            testRunner.When("the client is run", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "When ");
#line 16
            testRunner.Then("the road \'statusSeverity\' should be displayed as \'Road Status\'", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("Display Status Severity Description", new string[]
        {
            "displayStatusSeverityDescription"
        }, SourceLine = 18)]
        public virtual void DisplayStatusSeverityDescription()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(
                "Display Status Severity Description", null, new string[]
                {
                    "displayStatusSeverityDescription"
                });
#line 19
            this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 20
            testRunner.Given("a valid road ID \'A2\' is specified", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 21
            testRunner.When("the client is run", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "When ");
#line 22
            testRunner.Then("the road \'statusSeverityDescription\' should be displayed as \'Road Status Descript" +
                            "ion\'", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore

#endregion